diff --git a/EPW/src/ephwann_shuffle.f90 b/EPW/src/ephwann_shuffle.f90
index 1b0148f48..c552a0224 100644
--- a/EPW/src/ephwann_shuffle.f90
+++ b/EPW/src/ephwann_shuffle.f90
@@ -359,0 +360,8 @@
+  IF (ionode) THEN
+    OPEN (13, file='wigner.dat', action='write', status='replace', access='stream')
+    WRITE (13) nrr_k, irvec_k, ndegen_k, wslen_k
+    WRITE (13) nrr_q, irvec_q, ndegen_q, wslen_q
+    WRITE (13) nrr_g, irvec_g, ndegen_g, wslen_g
+    CLOSE (13)
+  ENDIF
+  !
diff --git a/LR_Modules/lrcom.f90 b/LR_Modules/lrcom.f90
index 6bb9b457b..e8c09ae56 100644
--- a/LR_Modules/lrcom.f90
+++ b/LR_Modules/lrcom.f90
@@ -49,0 +50,3 @@ MODULE control_lr
+  LOGICAL  :: bare           ! if .TRUE. calculate fully bare phonons
+  LOGICAL  :: cdfpt          ! if .TRUE. applies cDFPT
+  INTEGER, ALLOCATABLE :: cdfpt_subspace(:, :, :, :)
diff --git a/LR_Modules/orthogonalize.f90 b/LR_Modules/orthogonalize.f90
index 9b7bdcf43..95806c126 100644
--- a/LR_Modules/orthogonalize.f90
+++ b/LR_Modules/orthogonalize.f90
@@ -32 +32,3 @@ SUBROUTINE orthogonalize(dvpsi, evq, ikk, ikq, dpsi, npwq, dpsi_computed)
-  USE klist,            ONLY : lgauss, degauss, ngauss, ltetra, wk
+  USE klist,            ONLY : lgauss, degauss, ngauss, ltetra, wk, xk
+  USE start_k,          ONLY : nk1, nk2, nk3
+  USE cell_base,        ONLY : at
@@ -43 +45 @@ SUBROUTINE orthogonalize(dvpsi, evq, ikk, ikq, dpsi, npwq, dpsi_computed)
-  USE control_lr,       ONLY : alpha_pv, nbnd_occ
+  USE control_lr,       ONLY : alpha_pv, nbnd_occ, cdfpt, cdfpt_subspace
@@ -56 +58 @@ SUBROUTINE orthogonalize(dvpsi, evq, ikk, ikq, dpsi, npwq, dpsi_computed)
-  INTEGER :: ibnd, jbnd, nbnd_eff, n_start, n_end
+  INTEGER :: ibnd, jbnd, nbnd_eff, n_start, n_end, kk1, kk2, kk3, kq1, kq2, kq3
@@ -60,0 +63,8 @@ SUBROUTINE orthogonalize(dvpsi, evq, ikk, ikq, dpsi, npwq, dpsi_computed)
+  kk1 = modulo(nint(nk1 * dot_product(at(:, 1), xk(:, ikk))), nk1) + 1
+  kk2 = modulo(nint(nk2 * dot_product(at(:, 2), xk(:, ikk))), nk2) + 1
+  kk3 = modulo(nint(nk3 * dot_product(at(:, 3), xk(:, ikk))), nk3) + 1
+  !
+  kq1 = modulo(nint(nk1 * dot_product(at(:, 1), xk(:, ikq))), nk1) + 1
+  kq2 = modulo(nint(nk2 * dot_product(at(:, 2), xk(:, ikq))), nk2) + 1
+  kq3 = modulo(nint(nk3 * dot_product(at(:, 3), xk(:, ikq))), nk3) + 1
+  !
@@ -71 +81 @@ SUBROUTINE orthogonalize(dvpsi, evq, ikk, ikq, dpsi, npwq, dpsi_computed)
-  IF (ltetra .OR. lgauss) THEN
+  IF (ltetra .OR. lgauss .OR. cdfpt) THEN
@@ -92,0 +103,9 @@ SUBROUTINE orthogonalize(dvpsi, evq, ikk, ikq, dpsi, npwq, dpsi_computed)
+              !
+              IF (cdfpt) THEN
+                 IF (any(cdfpt_subspace(:, kk1, kk2, kk3) == ibnd) .AND. &
+                     any(cdfpt_subspace(:, kq1, kq2, kq3) == jbnd)) THEN
+                    ps(jbnd, ibnd) = wg1 * ps(jbnd, ibnd)
+                    CYCLE
+                 ENDIF
+              ENDIF
+              !
@@ -112,0 +132,10 @@ SUBROUTINE orthogonalize(dvpsi, evq, ikk, ikq, dpsi, npwq, dpsi_computed)
+        ELSEIF (cdfpt) THEN
+           !
+           DO jbnd = nbnd_occ(ikq) + 1, nbnd
+              IF (all(cdfpt_subspace(:, kk1, kk2, kk3) /= ibnd) .OR. &
+                  all(cdfpt_subspace(:, kq1, kq2, kq3) /= jbnd)) THEN
+                 ps(jbnd, ibnd) = 0.0_DP
+              ENDIF
+           ENDDO
+           CYCLE
+           !
@@ -188 +217 @@ SUBROUTINE orthogonalize(dvpsi, evq, ikk, ikq, dpsi, npwq, dpsi_computed)
-  IF (lgauss .OR. ltetra ) THEN
+  IF (lgauss .OR. ltetra .OR. cdfpt) THEN
diff --git a/PHonon/PH/do_phonon.f90 b/PHonon/PH/do_phonon.f90
index f1c86a103..f8ec383bf 100644
--- a/PHonon/PH/do_phonon.f90
+++ b/PHonon/PH/do_phonon.f90
@@ -36 +36 @@ SUBROUTINE do_phonon(auxdyn)
-  USE el_phon,         ONLY : elph, elph_mat, elph_simple, elph_epa
+  USE el_phon,         ONLY : elph, elph_mat, elph_simple, elph_epa, elph_defpot
@@ -129 +129 @@ SUBROUTINE do_phonon(auxdyn)
-        ELSE 
+        ELSEIF (.NOT. elph_defpot) THEN
diff --git a/PHonon/PH/elph.f90 b/PHonon/PH/elph.f90
index 183b11c3a..f02ce0204 100644
--- a/PHonon/PH/elph.f90
+++ b/PHonon/PH/elph.f90
@@ -15 +15 @@ MODULE el_phon
-  LOGICAL :: elph, elph_mat, elph_simple, elph_epa
+  LOGICAL :: elph, elph_mat, elph_simple, elph_epa, elph_defpot
diff --git a/PHonon/PH/phq_readin.f90 b/PHonon/PH/phq_readin.f90
index 3f9712a98..188e6e1db 100644
--- a/PHonon/PH/phq_readin.f90
+++ b/PHonon/PH/phq_readin.f90
@@ -69,0 +70 @@ SUBROUTINE phq_readin()
+                            elph_defpot, &
@@ -74 +75 @@ SUBROUTINE phq_readin()
-  USE control_lr,    ONLY : lgamma, lrpa
+  USE control_lr,    ONLY : lgamma, lrpa, bare, cdfpt, cdfpt_subspace
@@ -110,0 +112,2 @@ SUBROUTINE phq_readin()
+  CHARACTER(LEN=256) :: subspace
+  !
@@ -124 +127 @@ SUBROUTINE phq_readin()
-                       lshift_q
+                       lshift_q, bare, cdfpt, subspace
@@ -302,0 +306,4 @@ SUBROUTINE phq_readin()
+  bare = .false.
+  cdfpt = .false.
+  subspace = 'subspace.dat'
+  !
@@ -339,0 +347,4 @@ SUBROUTINE phq_readin()
+  CALL mp_bcast(bare, meta_ionode_id, world_comm)
+  CALL mp_bcast(cdfpt, meta_ionode_id, world_comm)
+  IF (cdfpt) CALL setup_subspace(cdfpt_subspace, subspace)
+  !
@@ -372,0 +384 @@ SUBROUTINE phq_readin()
+  elph_defpot = .false.
@@ -394,0 +407,6 @@ SUBROUTINE phq_readin()
+  CASE( 'defpot' )
+     elph=.true.
+     elph_mat=.false.
+     elph_simple=.false.
+     elph_epa=.false.
+     elph_defpot=.true.
@@ -797,2 +815,3 @@ SUBROUTINE phq_readin()
-  IF (elph.AND..NOT.(lgauss .or. ltetra).and..NOT.elph_yambo) CALL errore ('phq_readin', 'Electron-&
-       &phonon only for metals', 1)
+  IF (elph .AND. .NOT. (lgauss .OR. ltetra) &
+      .AND. .NOT. (elph_yambo .OR. elph_defpot)) &
+          CALL errore ('phq_readin', 'Electron-phonon only for metals', 1)
@@ -844,0 +864,31 @@ SUBROUTINE phq_readin()
+CONTAINS
+  !
+  SUBROUTINE setup_subspace(subspace, filename)
+     INTEGER, ALLOCATABLE, INTENT(OUT) :: subspace(:, :, :, :)
+     CHARACTER(LEN=256), INTENT(IN) :: filename
+     !
+     INTEGER, EXTERNAL :: find_free_unit
+     INTEGER :: id, nk(3), bands, band, offset
+     !
+     id = find_free_unit()
+     !
+     IF (meta_ionode) THEN
+        OPEN (id, file=filename, action='read', status='old')
+        READ (id, *) nk, bands, offset
+     ENDIF
+     !
+     CALL mp_bcast(nk, meta_ionode_id, world_comm)
+     CALL mp_bcast(bands, meta_ionode_id, world_comm)
+     !
+     ALLOCATE(subspace(bands, nk(1), nk(2), nk(3)))
+     !
+     IF (meta_ionode) THEN
+        DO band = 1, bands
+           READ (id, *) subspace(band, :, :, :)
+        ENDDO
+        CLOSE (id)
+        subspace(:, :, :, :) = subspace + offset
+     ENDIF
+     !
+     CALL bcast_integer(subspace, size(subspace), meta_ionode_id, world_comm)
+  END SUBROUTINE
diff --git a/PHonon/PH/solve_linter.f90 b/PHonon/PH/solve_linter.f90
index 861942da9..5f4b41b81 100644
--- a/PHonon/PH/solve_linter.f90
+++ b/PHonon/PH/solve_linter.f90
@@ -74 +74 @@ SUBROUTINE solve_linter (irr, imode0, npe, drhoscf)
-  USE control_lr,   ONLY : alpha_pv, nbnd_occ, lgamma
+  USE control_lr,   ONLY : alpha_pv, nbnd_occ, lgamma, bare
@@ -363,3 +363,5 @@ SUBROUTINE solve_linter (irr, imode0, npe, drhoscf)
-           call cgsolve_all (ch_psi_all, cg_psi, et(1,ikk), dvpsi, dpsi, &
-                             h_diag, npwx, npwq, thresh, ik, lter, conv_root, &
-                             anorm, nbnd_occ(ikk), npol )
+           IF (.NOT. bare) THEN
+              call cgsolve_all (ch_psi_all, cg_psi, et(1,ikk), dvpsi, dpsi, &
+                                h_diag, npwx, npwq, thresh, ik, lter, conv_root, &
+                                anorm, nbnd_occ(ikk), npol )
+           ENDIF
